tosca_definitions_version: cloudify_dsl_1_0

imports:
    - http://s3.amazonaws.com/vcloud-score/types.yaml
    - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/1.2.1m2/plugin.yaml
    - http://s3.amazonaws.com/vcloud-score/cloudify-fabric-plugin/1.2.1/plugin.yaml


inputs:

    vcloud_username:
        type: string
        description: >
            User login for vcloud air

    vcloud_password:
        type: string
        default: ''
        description: >
            User password for vcloud air - for login by name + password

    vcloud_token:
        type: string
        default: ''
        description: >
            User token for vcloud air - for login by name + token

    catalog:
        type: string
        default: Public Catalog
        description: >
            Name of catalog, can be 'Public Catalog'

    template:
        type: string
        default: Ubuntu Server 12.04 LTS (amd64 20150127)
        description: >
            Name of template from catalog,
            can be 'Ubuntu Server 12.04 LTS (amd64 20150127)'

    network_name:
        type: string
        description: >
            Name common network that can be used for nodes

    gateway_name:
        type: string
        default: gateway
        description: >
            For 'ondemand' service type, the value of edge_gateway
            is always 'gateway'

    public_ip:
        type: string
        default: ''
        description: >
            Ip used for connection from outside

    server_name:
        type: string
        default: nginxnode
        description: >
            server name for your node

    server_cpu:
        type: string
        default: 2
        description: >
            Count cpu on nodes

    server_memory:
        type: string
        default: 4096
        description: >
            Amount memmory on nodes

    ssh_user:
        default: ubuntu
        type: string
        description: >
            Default admin user in os template

    auto_generate_ssh_keys:
        type: boolean
        default: true
        description: >
            do we need autogenerate key?

    vcloud_vdc:
        type: string
        description: >
            Virtual data center name

    vcloud_instance:
        type: string
        default: ''
        description: >
            Only required for ondemand service type, instance uuid

    vcloud_service:
        type: string
        default: ''
        description: >
            Vcloud service

    vcloud_org:
        type: string
        description: >
            Organization name

    vcloud_url:
        type: string
        default: vca.vmware.com
        description: >
            Vcloud url

    vcloud_service_type:
        type: string
        default: ondemand
        description: >
            Type of service: subscription, ondemand, vcd, private

    vcloud_api_version:
        type: string
        default: '5.7'
        description: >
            Version of api, for now 5.6

    network_use_existing:
        type: boolean
        default: false
        description: >
            Use existed network

    user_public_key:
        type: string
        description: >
            Public part of your key,
            dont set if want to use autogenerated
        default: ""

    user_private_key:
        type: string
        description: >
            Put here content of your private key,
            with replace new line to 2 new lines.
            dont set if want to use autogenerated
        default: ""

node_types:
    vcloud_configuration:
        derived_from: cloudify.nodes.Root
        properties:
            vcloud_config: {}

node_templates:

    vcloud_configuration:
        type: vcloud_configuration
        properties:
            vcloud_config:
                username: { get_input: vcloud_username }
                password: { get_input: vcloud_password }
                token: { get_input: vcloud_token }
                url: { get_input: vcloud_url }
                instance: { get_input: vcloud_instance }
                vdc: { get_input: vcloud_vdc }
                org: { get_input: vcloud_org }
                service: { get_input: vcloud_service }
                service_type: { get_input: vcloud_service_type }
                api_version: { get_input: vcloud_api_version }
                edge_gateway: { get_input: gateway_name }

    ssh_keypair:
        type: cloudify.vcloud.nodes.KeyPair
        properties:
            auto_generate: { get_input: auto_generate_ssh_keys }
            public_key:
                user: { get_input: ssh_user }
                key: { get_input: user_public_key }
            private_key:
                key: { get_input: user_private_key }

    example_server:
        type: cloudify.vcloud.nodes.Server
        properties:
            server:
                name: { get_input: server_name }
                catalog: { get_input: catalog }
                template: { get_input: template }
                hardware:
                    cpu: { get_input: server_cpu }
                    memory: { get_input: server_memory }
                guest_customization:
                    computer_name: { get_input: server_name }
            install_agent: false
            management_network: { get_input: network_name }
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
        relationships:
            - target: common_network
              type: cloudify.vcloud.server_connected_to_network
            - target: example_public_ip
              type: cloudify.vcloud.server_connected_to_public_nat
            - target: ssh_keypair
              type: cloudify.vcloud.server_connected_to_keypair
            - target: nginx_security_group
              type: cloudify.vcloud.server_connected_to_security_group

    example_public_ip:
        type: cloudify.vcloud.nodes.PublicNAT
        properties:
            nat:
                edge_gateway: { get_input: gateway_name }
                public_ip: { get_input: public_ip }
            rules:
                - type: SNAT
                - type: DNAT
                  protocol: tcp
                  original_port: 22
                  translated_port: 22
                - type: DNAT
                  protocol: tcp
                  original_port: 80
                  translated_port: 80

    nginx_security_group:
        type: cloudify.vcloud.nodes.SecurityGroup
        properties:
            security_group:
                name: postgresql_security_group
                edge_gateway: { get_input: gateway_name }
            rules:
                - source: external
                  destination: internal
                  destination_port: 22
                  action: allow
                  description: >
                        ssh between external net and nginx node
                  protocol: TCP
                - source: external
                  destination: internal
                  destination_port: 80
                  action: allow
                  description: >
                        http connection
                  protocol: TCP
                - source: internal
                  destination: any
                  action: allow
                  description: >
                         backward network connection for host updates
                  protocol: any
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

    common_network:
        type: cloudify.vcloud.nodes.Network
        properties:
            use_external_resource: { get_input: network_use_existing }
            resource_id: { get_input: network_name }
            network:
                name: { get_input: network_name }
                edge_gateway: { get_input: gateway_name }
                static_range: 10.67.09.129-10.67.09.254
                netmask: 255.255.255.0
                gateway_ip: 10.67.09.1
                dns:
                    - 10.67.09.1
                    - 8.8.8.8
                dhcp:
                    dhcp_range: 10.67.09.2-10.67.09.128
            vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }

    nginx_service:
        type: cloudify.nodes.ApplicationServer
        interfaces:
            cloudify.interfaces.lifecycle:
                start:
                    implementation: fabric.fabric_plugin.tasks.run_script
                    inputs:
                      script_path: scripts/install_nginx.sh
                      fabric_env:
                        host_string: { get_attribute: [example_public_ip, public_ip] }
                        user: { get_attribute: [ssh_keypair, public_key, user] }
                        key: { get_attribute: [ssh_keypair, private_key, key] }
                        disable_known_hosts: True
        relationships:
          - type: cloudify.relationships.contained_in
            target: example_server


outputs:
    ssh_key:
        description: ssh key pair generated during deployment
        value:
            public_key: { get_attribute: [ssh_keypair, public_key, key] }
            private_key: { get_attribute: [ssh_keypair, private_key, key] }

